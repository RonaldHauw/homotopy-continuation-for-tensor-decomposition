module Dual
using DynamicPolynomials
using Random
using LinearAlgebra
using HomotopyContinuation
include("DualUtils.jl")
include("KuoLeeUtils.jl")
using .KuoLeeUtils
using .DualUtils

export kld_fd_cpd, kld_pr_cpd

"""
# `kld_fd_cpd`

Calculate the cpd of a flattened order 3 tensor via the dual problem. The algoritm numerically
reduces the size of the square system used for homotopy continuation by setting some variables to a random value.
This method solves the dual problem by calling `dual_solve` and than translates the
dual problem to the primal via `translate_dual_prim`.
The documentation of these methods elaborates more on the techniques used.

## Inputs

- `T`: flattened real or complex tensor
- `r`: rank of the cpd
- `dims`: tuple of the dimensions, first dimension should be larger than r.

## Outputs
The method outputs the calculated factor matrices
```math
    T \\approx (Z_{\\text{calc}} \\odot Y_{\\text{calc}})X_{\\text{calc}}^H
```

- `Xcalc`
- `Ycalc`
- `Zcalc`

## Optional arguments
- `maxit_basis`: (`Int64`) maximum number of iterations used in `solve_dual`.
- `maxit_ortho`: (`Int64`) maximum number of iterations used in `translate_dual_prim`.
- `verbose`: (`Bool`) give some information about the number of iterations / the type of problems solved.
- `strategy`: (`String`) tell `solve_dual` which methods it should use to grow the basis. See `solve_dual` for the possible values.

## Example
```julia
dims = (43, 8, 7);
r = 6;
X, Y, Z, T = cpd_gen(dims, r);

Xcalc, Ycalc, Zcalc = kld_fd_cpd(T, r, dims);

TÃÉ = cpd_gen(Xcalc, Ycalc, Zcalc);
œµ = norm(T-TÃÉ)/norm(T);
```

"""
function kld_fd_cpd(
    T::Array{d_type, 2},
    r::Int64,
    dims::Tuple{Int64, Int64, Int64};
    verbose=false,
    dual_solve_maxit =sum(dims)*4,
    translate_dual_prim_maxit = prod(dims)*4,
    measure_condition = false,
    strategy="optimal",
    relative_orthogonality_check = 1e-4,
    tranlsate_dual_prim_sigma_threshold = 1e-3,
    dual_solve_filtsols_independent_threshold = 1e-5,
    dual_solve_filtsols_residual_threshold = 1e-10,
    dual_solve_filtsols_triviality_threshold = 1e-4,
    nonzero_threshold = 1e-10,
    ) where d_type

    # to be extended for higher orders
    @assert length(dims) == 3 "This function only works for tensors of order 3."

    # unpack
    n‚ÇÅ, n‚ÇÇ, n‚ÇÉ = dims;

    # check if Kuo Lee applies for this tensor
    if n‚ÇÅ != maximum(dims)
        println("Warning: The first dimension is not the largest dimension. Consider swapping the dimensions.")
    end
    @assert r <= n‚ÇÅ  "The largest dimension is smaller than the rank. Decrease the rank or increase the largest dimension."
    @assert r <= n‚ÇÇ*n‚ÇÉ "The product of the second and third dimension is larger than the rank."
    @assert r <= n‚ÇÇ+n‚ÇÉ-2 "This tensor cannot be decomposed with the dual algorithm since r > n‚ÇÇ+n‚ÇÉ-2."

    # full rank factorization
    E, F, N = rankfact_nullspace(T, r);


    # calculate the basis U ‚äô V for N
    if measure_condition
        N_r1, UV, lin_cond, poly_cond = dual_solve(E, dims, r;
            maxit = dual_solve_maxit,
            verbose = verbose,
            strategy = "last_xy",
            full=false,
            measure_condition=true
        );
        success = 1;
    else
        success, N_r1, UV = dual_solve(E, dims, r;
            maxit = dual_solve_maxit,
            verbose = verbose,
            strategy =strategy,
            full=false,
            filtsols_independent_threshold = dual_solve_filtsols_independent_threshold,
            filtsols_residual_threshold = dual_solve_filtsols_residual_threshold,
            filtsols_triviality_threshold = dual_solve_filtsols_triviality_threshold,
            nonzero_threshold = nonzero_threshold,
        );
    end

    @assert success == 1 "Failed to find a full basis U ‚äô V for N."

    # unpack the datastructure of UV to the matrices U and V
    V = reduce(hcat, [UV[i][2] for i ‚àà 1:length(UV)])
    U = reduce(hcat, [UV[i][1] for i ‚àà 1:length(UV)])

    N_ = reduce(hcat, [kron(U[:, i], V[:, i]) for i ‚àà 1:n‚ÇÇ*n‚ÇÉ-r]);
    @assert maximum(abs.(E'*N_))/maximum(abs.(N_)) < relative_orthogonality_check "Calculated basis U ‚äô V not orthogonal to E."


    # provide output if asked
    if verbose; println("\n"); end

    # calculate a basis orthogonal to U ‚äô V
    success, ùõá = translate_dual_prim(V, U, dims, r;
        maxit = translate_dual_prim_maxit,
        sigma_threshold = tranlsate_dual_prim_sigma_threshold,
        nonzero_threshold=nonzero_threshold,
        verbose = verbose
    );

    @assert success == 1 "Failed to find a full basis Z ‚äô Y orthogonal to U ‚äô V."

    # unpack the datastructure ùõá to the matrices Ycalc and Zcalc
    Ycalc = reduce(hcat, [ùõá[i][1] for i ‚àà 1:length(ùõá)]);
    Zcalc = reduce(hcat, [ùõá[i][2] for i ‚àà 1:length(ùõá)]);

    # normbalance
    Ycalc, Zcalc = KuoLeeUtils.normbalance(Ycalc, Zcalc)

    # E_ = Z ‚äô Y
    E_ = reduce(hcat, [kron(Zcalc[:, i], Ycalc[:, i]) for i ‚àà 1:r]);

    @assert maximum(abs.(E_'*N))/maximum(abs.(E_)) < relative_orthogonality_check "Calculated basis Z ‚äô Y not orthogonal to N."

    # calculate the rotation between the given base E and it's rank-one basis Z ‚äô Y
    W = E'*E_;

    if measure_condition
        w_cond = cond(W);
    end;

    # calculate X
    Xcalc = (W \ F')';
    Xcalc = Array{ComplexF64, 2}(Xcalc);

    # normbalance
    Xcalc, Ycalc, Zcalc = KuoLeeUtils.normbalance(Xcalc, Ycalc, Zcalc);

    # recompose tensor
    Tcalc = reduce(hcat, [kron(Zcalc[:, i], Ycalc[:, i]) for i ‚àà 1:r])*Xcalc';

    bwerr = maximum(abs.(Tcalc-T))/maximum(abs.(T))
    @assert bwerr < relative_orthogonality_check "Relative backward error of $(bwerr) too high."

    if measure_condition
        return Xcalc, Ycalc, Zcalc, lin_cond, poly_cond, w_cond
    else
        return Xcalc, Ycalc, Zcalc
    end
end
# overload for different order of variables
function kld_fd_cpd(
    T::Array{d_type, 2},
    dims::Tuple{Int64, Int64, Int64},
    r::Int64;
    verbose=false,
    kwargs...
    ) where d_type
    return kld_fd_cpd(T, r, dims;
        kwargs...
    )
end


"""
# `kld_pr_cpd_refine`

Calculate the cpd of an unbalanced flattened order 3 tensor via the dual problem.
 The method solves the dual problem by paramter homotopy and requires an initial decomposition.
    See `kl_pr_cpd`for a wrapper which also constructs the initial decomposition.


## Inputs

- `T‚ÇÄ`: start flattened tensor
- `T‚ÇÅ`: target flattened tensor
- `Y‚ÇÄ`: factor matrix of start tensor
- `Z‚ÇÄ`: factor matrix of start tensor
- `dims`:  dimensions `(n‚ÇÅ, n‚ÇÇ, n‚ÇÉ)` of start and target tensor.
    `Y‚ÇÄ` should have dimensions n‚ÇÇ√ór, `Z‚ÇÄ` should have dimensions n‚ÇÉ√ór.
- `r`: rank of the tensor


## Outputs
The method outputs the calculated factor matrices

```math
    T \\approx (Z_{\\text{calc}} \\odot Y_{\\text{calc}})X_{\\text{calc}}^H
```

- `Xcalc`
- `Ycalc`
- `Zcalc`
"""
function kld_pr_cpd_refine(T‚ÇÄ, T‚ÇÅ, Y‚ÇÄ, Z‚ÇÄ, dims, r;
        translate_prim_dual_sigma_threshold = 1e-4,
        translate_dual_prim_sigma_threshold = 1e-6,
        translate_prim_dual_maxit = 5000,
        translate_dual_prim_maxit = 5000,
        independent_threshold = 1e-5,
        verbose = false,
        maxit_orth = 100,
        residual_check_threshold = 1e-4,
        maxit = 10,
        )


    n‚ÇÅ, n‚ÇÇ, n‚ÇÉ = dims


    # full rank factorization
    E‚ÇÅ, F‚ÇÅ, N‚ÇÅ = rankfact_nullspace(T‚ÇÅ, r);
    E‚ÇÄ, F‚ÇÄ, N‚ÇÄ = rankfact_nullspace(T‚ÇÄ, r);

    # construct a basis U‚ÇÄ ‚äô V‚ÇÄ for N‚ÇÄ
    success, UV‚ÇÄ = DualUtils.translate_prim_dual(Y‚ÇÄ, Z‚ÇÄ, dims, r;
        sigma_threshold=translate_prim_dual_sigma_threshold,
        maxit=translate_prim_dual_maxit
        )

    V‚ÇÄ = reduce(hcat, [conj(UV‚ÇÄ[i][1]) for i ‚àà 1:length(UV‚ÇÄ)])
    U‚ÇÄ = reduce(hcat, [conj(UV‚ÇÄ[i][2]) for i ‚àà 1:length(UV‚ÇÄ)])

    N‚ÇÄ_ = reduce(hcat, [kron(U‚ÇÄ[:, i], V‚ÇÄ[:, i]) for i ‚àà 1:length(UV‚ÇÄ)]);


    @assert success == 1 "Failed to construct a basis U‚ÇÄ ‚äô V‚ÇÄ from Z‚ÇÄ ‚äô Y‚ÇÄ."

    # loop condition
    no_base_found = true

    # loop counter
    it = 0

    # solution containers should be in outer scope to access them after the loop
    Ycalc = nothing
    Zcalc = nothing
    E_ = nothing
    UV‚ÇÅ = Array{Array{ComplexF64, 1}}[]
    YZ‚ÇÅ = nothing
    E‚ÇÅ_ = nothing

    lastrank_N‚ÇÅ_ = 0;

    while no_base_found


        success, UV = DualUtils.dual_track_single(UV‚ÇÄ, E‚ÇÄ, E‚ÇÅ, dims, r)

        @assert success == 1 "Path tracking failed."

        for ùêÆùêØ ‚àà UV
            push!(UV‚ÇÅ, ùêÆùêØ)
            V‚ÇÅ = reduce(hcat, [conj(UV‚ÇÅ[i][1]) for i ‚àà 1:length(UV‚ÇÅ)])
            U‚ÇÅ = reduce(hcat, [conj(UV‚ÇÅ[i][2]) for i ‚àà 1:length(UV‚ÇÅ)])
            N‚ÇÅ_ = reduce(hcat, [kron(U‚ÇÅ[:, i], V‚ÇÅ[:, i]) for i ‚àà 1:length(UV‚ÇÅ)]);
            N‚ÇÅ_svd = svd(N‚ÇÅ_);
            if N‚ÇÅ_svd.S[end]/N‚ÇÅ_svd.S[1] < independent_threshold
                pop!(UV‚ÇÅ)
            end
        end

        V‚ÇÅ = reduce(hcat, [conj(UV‚ÇÅ[i][1]) for i ‚àà 1:length(UV‚ÇÅ)])
        U‚ÇÅ = reduce(hcat, [conj(UV‚ÇÅ[i][2]) for i ‚àà 1:length(UV‚ÇÅ)])
        N‚ÇÅ_ = reduce(hcat, [kron(U‚ÇÅ[:, i], V‚ÇÅ[:, i]) for i ‚àà 1:length(UV‚ÇÅ)]);

        if verbose
            println("   - Rank current base of N: $(rank(N‚ÇÅ_))")
        end

        @assert maximum(abs.(N‚ÇÅ_'*E‚ÇÅ))/maximum(abs.(N‚ÇÅ_)) < residual_check_threshold "U‚ÇÅ ‚äô V‚ÇÅ not perpendicular to E‚ÇÅ."

        # note that this search may be unsucssesfull
        success, YZ‚ÇÅ = DualUtils.translate_dual_prim(V‚ÇÅ, U‚ÇÅ, dims, r;
            soft=true,
            maxit = translate_dual_prim_maxit,
            sigma_threshold=translate_dual_prim_sigma_threshold,
            verbose = false
            );

        if verbose
                println("   - Rank corresponding base of E: $(length(YZ‚ÇÅ))")
        end
        if success == 1 || length(YZ‚ÇÅ) >= r # full base and not positive dimensional (success flag seems to be too strict: to adapt code)
            Ycalc = reduce(hcat, [YZ‚ÇÅ[i][1] for i ‚àà 1:length(YZ‚ÇÅ)]);
            Zcalc = reduce(hcat, [YZ‚ÇÅ[i][2] for i ‚àà 1:length(YZ‚ÇÅ)]);
            Ycalc, Zcalc = KuoLeeUtils.normbalance(Ycalc, Zcalc);
            E‚ÇÅ_ = reduce(hcat, [kron(Zcalc[:, i], Ycalc[:, i]) for i ‚àà 1:r]);
            if maximum(abs.(E‚ÇÅ_'*N‚ÇÅ))/maximum(abs.(E‚ÇÅ_)) < residual_check_threshold # the base we have is the right one
                no_base_found = false
            end
        end

        it+=1

        @assert it < maxit "Reached maxit."
    end



    W = E‚ÇÅ'*E‚ÇÅ_;
    Xcalc = (W \ F‚ÇÅ')';
    Xcalc = Array{ComplexF64, 2}(Xcalc);
    Xcalc, Ycalc, Zcalc = KuoLeeUtils.normbalance(Xcalc, Ycalc, Zcalc);
    Tcalc = reduce(hcat, [kron(Zcalc[:, i], Ycalc[:, i]) for i ‚àà 1:r])*Xcalc';

    @assert maximum(abs.(Tcalc-T‚ÇÅ))/maximum(abs.(T‚ÇÅ)) < residual_check_threshold "Relative backward error too high."

    return Xcalc, Ycalc, Zcalc
end

"""
# `kld_pr_cpd`

Calculate the cpd of an order 3 unbalanced flattened tensor. This method uses a parameter homotopy to solve
the dual problem. This function constructs an initial decomposition and then calls `kld_pr_cpd_refine`.

## Inputs
- `T‚ÇÅ`: flattened tensor
- `r`: rank of `T‚ÇÅ`
- `dims`: tuple with dimensions `(n‚ÇÅ, n‚ÇÇ, n‚ÇÉ)` of the tensor  such that
    `T‚ÇÅ` has dimensions n‚ÇÇn‚ÇÉ√ón‚ÇÅ

## Outputs
The method outputs the calculated factor matrices
```math
    T \\approx (Z_{\\text{calc}} \\odot Y_{\\text{calc}})X_{\\text{calc}}^H
```

- `Xcalc`
- `Ycalc`
- `Zcalc`

"""
function kld_pr_cpd(T‚ÇÅ::Array{d_type, 2}, r::Int64, dims::Tuple{Int64, Int64, Int64}; verbose=false, kwargs...) where d_type
    n‚ÇÅ, n‚ÇÇ, n‚ÇÉ = dims
    X‚ÇÄ = randn(d_type, n‚ÇÅ, r);
    Y‚ÇÄ = randn(d_type, n‚ÇÇ, r);
    Z‚ÇÄ = randn(d_type, n‚ÇÉ, r);
    T‚ÇÄ = reduce(hcat, [kron(Z‚ÇÄ[:, i], Y‚ÇÄ[:, i]) for i ‚àà 1:r])*X‚ÇÄ';
    return kld_pr_cpd_refine(T‚ÇÄ, T‚ÇÅ, Y‚ÇÄ, Z‚ÇÄ, dims, r; verbose=verbose, kwargs...)
end
# overload for different order of required arguments
function kld_pr_cpd(T‚ÇÅ::Array{d_type, 2}, dims::Tuple{Int64, Int64, Int64}, r::Int64; verbose=false, kwargs...) where d_type
    return kld_pr_cpd(T‚ÇÅ, r, dims; verbose=verbose, kwargs...)
end











end # Dual
